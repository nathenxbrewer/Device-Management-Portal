@inject ISnackbar Snackbar
@using CircleK.SNOW.SDK.Models
@using CircleK.Smartsheet
@using CircleK.Smartsheet.Models
@using Newtonsoft.Json
@using System.Text
@using CircleK.SNOW.SDK
@using System.Net.Http.Json

@inject HttpClient httpClient

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Add Store Group
        </MudText>
    </TitleContent>
    <DialogContent>
            <MudTextField @bind-Value=GroupName Label="Name"/>
            <MudTextField @bind-Value="GroupDescription" Label="Description"/>
            <MudChipSet Name=chips AllClosable="true" OnClose="Closed">
                    @foreach (var location in stores)
                {
                    <MudChip Text="@location"></MudChip>
                }
            </MudChipSet>
            Add Store to Group<MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddStore">Add Store to Group</MudIconButton>
                <MudItem>
        <MudAutocomplete T="ManagedPower.SDK.Models.API.Location" Label="Enter Store" @bind-Value="Store" ToStringFunc="@converter" SearchFunc="@StoreSearch"
                         CoerceText=true CoerceValue=true
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
    </MudItem>
            
            
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="@(() => AddGroup())">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ManagedPower.SDK.Models.API.Location SelectedSite { get; set; }


    public ManagedPower.SDK.Models.API.Location NewLocation { get; set; }

    public List<ManagedPower.SDK.Models.API.Location> AllLocations { get; set; }

    public string GroupName { get; set; }
    public string GroupDescription { get; set; }
    public List<string> stores = new List<string>();
    public ManagedPower.SDK.Models.API.Location Store { get; set; }
    Func<ManagedPower.SDK.Models.API.Location, string> converter = p => p?.storenumber;

    MudAutocomplete<Site> selectedSiteField { get; set; }


        protected override async Task OnInitializedAsync()
    {
        AllLocations = await httpClient.GetFromJsonAsync<List<ManagedPower.SDK.Models.API.Location>>("http://cluw12q05.macsstores.com/managedpower/locations/");
        if(SelectedSite == null)
        {
            SelectedSite = new();
        }

        NewLocation = new();
    }

    private async Task<IEnumerable<ManagedPower.SDK.Models.API.Location>> StoreSearch(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return AllLocations;
        return AllLocations.Where(x => x.storenumber.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    private void Cancel()
    {
        MudDialog.Cancel();
    }

    public void Closed(MudChip chip) => stores.Remove(chip.Text);


    public void AddStore()
    {
        if (Store != null)
        {
            stores.Add(Store.storenumber);
        }

    }

    private void AddGroup()
    {
        MudDialog.Close(DialogResult.Ok("test"));

        var storegroup = new ManagedPower.SDK.Models.API.StoreGroups()
            {
                Name = GroupName,
                Stores = string.Join( ",", stores.ToArray() ),
                Description = GroupDescription,
                Created_by = 1,
                Created_date = DateTime.Now,
                Modified = DateTime.Now,

            };

            var jsonstring = JsonConvert.SerializeObject(storegroup);

        using (var client = new HttpClient())
            {
                var res = client.PostAsync("http://cluw12q05.macsstores.com/managedpower/storegroups/",
                    new StringContent(jsonstring,
                    Encoding.UTF8, "application/json")
                );
                try
                {
                    res.Result.EnsureSuccessStatusCode();
                    Snackbar.Add($"Store Group {GroupName} has been added!", Severity.Success);

                    }
                    catch (Exception e)
                {
                    Console.WriteLine(e.ToString());
                }
            }
    }
}